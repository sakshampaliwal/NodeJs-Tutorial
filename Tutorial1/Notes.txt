Synchronous: 

Synchronous means the code runs in a particular sequence of instructions given in the program. 
Each instruction waits for the previous instruction to complete its execution. Synchronous is a blocking architecture, so the execution of each operation is dependent on the completion of the one before it. 
Each task requires an answer before moving on to the next iteration.
E.g: 
console.log('First');
console.log('Second');
console.log('Third');

Output: 
First
Second
Third

Asynchronous: 

Due to this nature of synchronous programming, sometimes important instructions get blocked due to some previous instructions, which causes a delay in the user interface. 
Asynchronous code execution allows to execution next instructions immediately and doesn't block the flow because of previous instructions.
Asynchronous is a non-blocking architecture, so the execution of one task isn’t dependent on another. Tasks can run simultaneously.
E.g:
console.log('First');

// Set timeout for 2 seconds
setTimeout(() => console.log('Second'), 2000);

console.log('Third');

Output: 
First
Third
Second


The differences between asynchronous and synchronous include:

Async is multi-thread, which means operations or programs can run in parallel.
Sync is single-thread, so only one operation or program will run at a time.
Async is non-blocking, which means it will send multiple requests to a server.
Sync is blocking — it will only send the server one request at a time and will wait for that request to be answered by the server.


CallBack Function:

In Javascript you can also pass a function as an argument to a function. This function that is passed as an argument inside of another function is called a callback function.
JavaScript runs code sequentially in top-down order. 
However, there are some cases that code runs (or must run) after something else happens and also not sequentially. This is called asynchronous programming.

E.g:
1st way to declare: 
const message = function() {  
    console.log("This message is shown after 3 seconds");
}
 
setTimeout(message, 3000);

2nd way:
setTimeout(function() {  
    console.log("This message is shown after 3 seconds");
}, 3000);

3rd way: (As an Arrow Function)
setTimeout(() => { 
    console.log("This message is shown after 3 seconds");
}, 3000);

Http Methods:

1. Get: When you want to get some data from the server.GET method requests data from a server using URL parameters.
2. Post: When you want to send or mutate some data in server. POST data is sent in the request body which cannot be seen by the user.
3. Put: Just like POST, the PUT method also sends data to a server for modification. However, POST is used to add new data to a database, whereas PUT is used to update existing data.
4. Patch: Generally, PUT is used to update entire records and all relevant data is included in the request body. PATCH also updates data, but it only sends the data that need change -- much like a 'delta'.
5. Delete: The DELETE method is used to delete a specified resource - usually a database record.

Versioning:

Version numbers typically consist of three parts, separated by dots: major.minor.patch.
e.g: 18.2.3 
here, 3 is Patch update: A patch is an update which is meant to fix existing bugs  and it’s backward compatible (meaning you can update without having to worry about your current usage of the library being broken).
2 is Minor Update: A minor update represents an update which introduces new features and it’s also backward compatible.
18 is Major Update: Major update is very different from the previous kind of updates since it is not backward compatible (meaning, upgrading to a new major version introduces breaking changes and might cause your previous version code to break). A major update represents a change which is massive and could change the whole mechanism of the library and how it works.

Caret (^) : It means 18 part is fixed and you can update 2 and 3 which is minor and patch update, but cannot major update it.
Tilde (~) : It means you can update patch part(3) but cannot 18 and 2 part.

Package-lock.json file:

A set of these packages make up a library. Package.json is a file that contains all the relevant information about your project, the dependencies it has installed, and so on. 
When someone clones your repo and runs npm install the presence of ^ will cause them to get the latest patched version (whether that be a major or minor patch). 
Codes which are not in consonance with the latest version will break down.
This is when they released package-lock.json. Now, this file will lock npm dependencies the way they were at the time of making the program. 
So, even if someone clones your repo and installs this package later, he will get hands on the version that the program was scripted in. Basically, it just ignores tilde and carat functions.

The package.json file is typically located at the root directory of a Node.js project and is automatically generated when you run npm init command to initialize a new project. 
 For More Read this article: https://www.atatus.com/blog/package-json-vs-package-lock-json/#:~:text=your%20entire%20problem.-,package%2Dlock.,sub%2Ddependencies%20and%20their%20versions


 RestFul API:

 API is a set of rules and definitions that allow different computers, software, or services to communicate with each other over the internet. 
 When two systems communicate, the server is the one that provides the API, and the client is the one who consumes it.
 An API can be called REST-FUL if it satisfies the REST architectural principles.
 REST stands for Representational State Transfer. 
 This means that when a client requests a resource using a REST API, the server transfers back the current state of the resource in a standardized representation.
 
 Six Guidelines:

    1. Client-Server Archi: This principle states that the client and the server components should be isolated from each other. The client should not be able to modify anything on the server-side. The server should not be able to modify anything on the client side. 
       The interaction between the client and the server should always be via the API.By separating the user interface concerns (client) from the data storage concerns (server), we improve the portability of the user interface across multiple platforms and improve scalability by simplifying the server components.
    
    2. Uniform Interface: This guideline states that all requests and all responses must follow a common protocol, or a way of formatting their messages. 
       A uniform interface is a common language for any client to communicate with any REST API. For most REST APIs, this common language is HTTP. HTTP wasn’t created specifically for REST. Rather, REST adopted this communication protocol as the standard for applications that use it.

    3. Statelessness: Request from client to server must contain all of the information necessary so that the server can understand and process it accordingly. The server can’t hold any information about the client state.

    4. Cacheable: When a client returns to that site, the cached data is loaded quickly from local storage instead of being fetched again from the server. Caching saves server resources and bandwidth while decreasing page load time, which is why most large websites do it.
        REST APIs are created with data caching in mind. When a server sends its response to a client, the response should indicate whether the resource provided can be cached, and for how long.

    5. Layered System:  In layered system architecture, we can have many intermediate layers in between the client and the server. Each layer will be responsible for a performing a separate function. These functions can be Authentication, Caching, Load Balancing, Data manipulation, and much more. Additional layers should not affect client-server interactions.

    6. Code on Demand(Optional): If desired, an API can send computer code to clients in its response. This empowers the client to run the code in its own backend. Servers can provide part of features delivered to the client in the form of code, and the client only needs to execute the code.

